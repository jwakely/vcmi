diff --git a/AI/VCAI/AIUtility.cpp b/AI/VCAI/AIUtility.cpp
index 3ca20b0..d884fa6 100644
--- a/AI/VCAI/AIUtility.cpp
+++ b/AI/VCAI/AIUtility.cpp
@@ -179,7 +179,7 @@ std::string strFromInt3(int3 pos)
 	return oss.str();
 }
 
-bool CDistanceSorter::operator ()(const CGObjectInstance *lhs, const CGObjectInstance *rhs)
+bool CDistanceSorter::operator ()(const CGObjectInstance *lhs, const CGObjectInstance *rhs) const
 {
 	const CGPathNode *ln = ai->myCb->getPathsInfo(hero)->getPathInfo(lhs->visitablePos()),
 	                 *rn = ai->myCb->getPathsInfo(hero)->getPathInfo(rhs->visitablePos());
diff --git a/AI/VCAI/AIUtility.h b/AI/VCAI/AIUtility.h
index bbe96f8..8fcc0a2 100644
--- a/AI/VCAI/AIUtility.h
+++ b/AI/VCAI/AIUtility.h
@@ -167,5 +167,5 @@ class CDistanceSorter
 public:
 	CDistanceSorter(const CGHeroInstance * hero): hero(hero) {}
 
-	bool operator ()(const CGObjectInstance *lhs, const CGObjectInstance *rhs);
+	bool operator ()(const CGObjectInstance *lhs, const CGObjectInstance *rhs) const;
 };
diff --git a/client/windows/CAdvmapInterface.cpp b/client/windows/CAdvmapInterface.cpp
index d14e3a8..d096854 100644
--- a/client/windows/CAdvmapInterface.cpp
+++ b/client/windows/CAdvmapInterface.cpp
@@ -781,7 +781,7 @@ void CAdvMapInt::updateMoveHero(const CGHeroInstance *h, tribool hasPath)
 	if(boost::logic::indeterminate(hasPath))
 		hasPath = LOCPLINT->paths[h].nodes.size() ? true : false;
 
-	moveHero->block(!hasPath || (h->movement == 0));
+	moveHero->block(bool(!hasPath) || (h->movement == 0));
 }
 
 void CAdvMapInt::updateSpellbook(const CGHeroInstance *h)
diff --git a/lib/CBattleCallback.cpp b/lib/CBattleCallback.cpp
index 334bca2..3dcb8a7 100644
--- a/lib/CBattleCallback.cpp
+++ b/lib/CBattleCallback.cpp
@@ -499,7 +499,7 @@ bool CBattleInfoEssentials::battleMatchOwner(const CStack * attacker, const CSta
 	else if(defender->owner != battleGetOwner(defender))
 		return true;//mind controlled unit is attackable for both sides
 	else
-		return (battleGetOwner(attacker) == battleGetOwner(defender)) == positivness;
+		return (battleGetOwner(attacker) == battleGetOwner(defender)) == (bool) positivness;
 }
 
 si8 CBattleInfoCallback::battleHasWallPenalty( const CStack * stack, BattleHex destHex ) const
@@ -1359,7 +1359,7 @@ std::pair<const CStack *, BattleHex> CBattleInfoCallback::getNearestStack(const
 
 	std::vector<const CStack *> possibleStacks = battleGetStacksIf([=](const CStack * s)
 	{
-		return s->isValidTarget(false) && s != closest && (boost::logic::indeterminate(attackerOwned) || s->attackerOwned == attackerOwned);
+		return s->isValidTarget(false) && s != closest && bool(boost::logic::indeterminate(attackerOwned) || s->attackerOwned == attackerOwned);
 	});
 
 	for(const CStack * st : possibleStacks)
